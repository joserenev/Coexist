type User {
  id: ID!
  username: String
  email: String
  name: String
  phone: String
  groups(filter: ModelUserGroupsFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelUserGroupsConnection
  tasks(filter: ModelTaskFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelTaskConnection
  createdAt: String
  updatedAt: String
  pictureURL: String
  lastPageLoad: String
  heartbeat: String
}

type UserGroups {
  id: ID!
  user: User
  group: Group
}

type Group {
  id: ID!
  name: String
  owner: User
  type: String
  description: String
  users(filter: ModelUserGroupsFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelUserGroupsConnection
  lastReceiptCalculationTime: String
  createdAt: String
  updatedAt: String
  pictureURL: String
  totalBudget: String
  remainingBalance: String
  receipts(filter: ModelReceiptFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelReceiptConnection
  groupCalculations(filter: ModelExpensesCalculationFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelExpensesCalculationConnection
  tasks(filter: ModelTaskFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelTaskConnection
  events(filter: ModelCalendarEventFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelCalendarEventConnection
}

type Receipt {
  id: ID!
  owner: User
  name: String
  description: String
  memberSplit: String
  totalAmount: String
  createdAt: String
  updatedAt: String
  group: Group
  receiptImageUrl: String
  approvalStatus: String
  approvedDate: String
  approverList: [String]
}

type ExpensesCalculation {
  id: ID!
  cycleEndDate: String
  totalExpenditure: String
  expenseDivision: String
  group: Group
  totalOwed: String
}

type Task {
  id: ID!
  owner: User
  name: String
  description: String
  assignedTo: User
  createdAt: String
  updatedAt: String
  dueDate: String
  group: Group
  status: String
  isImportant: Boolean
  notifStatus: String
}

type CalendarEvent {
  id: ID!
  owner: User
  name: String
  description: String
  location: String
  createdAt: String
  updatedAt: String
  startTimestamp: String
  endTimestamp: String
  group: Group
  status: String
  memberResponses: String
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelUserConnection {
  items: [User]
  nextToken: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelUserFilterInput {
  id: ModelIDInput
  username: ModelStringInput
  email: ModelStringInput
  name: ModelStringInput
  phone: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  pictureURL: ModelStringInput
  lastPageLoad: ModelStringInput
  heartbeat: ModelStringInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

type Query {
  getUser(id: ID!): User
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection
  getGroup(id: ID!): Group
  listGroups(filter: ModelGroupFilterInput, limit: Int, nextToken: String): ModelGroupConnection
  getReceipt(id: ID!): Receipt
  listReceipts(filter: ModelReceiptFilterInput, limit: Int, nextToken: String): ModelReceiptConnection
  getExpensesCalculation(id: ID!): ExpensesCalculation
  listExpensesCalculations(filter: ModelExpensesCalculationFilterInput, limit: Int, nextToken: String): ModelExpensesCalculationConnection
  getTask(id: ID!): Task
  listTasks(filter: ModelTaskFilterInput, limit: Int, nextToken: String): ModelTaskConnection
  getCalendarEvent(id: ID!): CalendarEvent
  listCalendarEvents(filter: ModelCalendarEventFilterInput, limit: Int, nextToken: String): ModelCalendarEventConnection
}

input CreateUserInput {
  id: ID
  username: String
  email: String
  name: String
  phone: String
  createdAt: String
  updatedAt: String
  pictureURL: String
  lastPageLoad: String
  heartbeat: String
}

input UpdateUserInput {
  id: ID!
  username: String
  email: String
  name: String
  phone: String
  createdAt: String
  updatedAt: String
  pictureURL: String
  lastPageLoad: String
  heartbeat: String
}

input DeleteUserInput {
  id: ID
}

type Mutation {
  createUser(input: CreateUserInput!, condition: ModelUserConditionInput): User
  updateUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User
  deleteUser(input: DeleteUserInput!, condition: ModelUserConditionInput): User
  createUserGroups(input: CreateUserGroupsInput!, condition: ModelUserGroupsConditionInput): UserGroups
  updateUserGroups(input: UpdateUserGroupsInput!, condition: ModelUserGroupsConditionInput): UserGroups
  deleteUserGroups(input: DeleteUserGroupsInput!, condition: ModelUserGroupsConditionInput): UserGroups
  createGroup(input: CreateGroupInput!, condition: ModelGroupConditionInput): Group
  updateGroup(input: UpdateGroupInput!, condition: ModelGroupConditionInput): Group
  deleteGroup(input: DeleteGroupInput!, condition: ModelGroupConditionInput): Group
  createReceipt(input: CreateReceiptInput!, condition: ModelReceiptConditionInput): Receipt
  updateReceipt(input: UpdateReceiptInput!, condition: ModelReceiptConditionInput): Receipt
  deleteReceipt(input: DeleteReceiptInput!, condition: ModelReceiptConditionInput): Receipt
  createExpensesCalculation(input: CreateExpensesCalculationInput!, condition: ModelExpensesCalculationConditionInput): ExpensesCalculation
  updateExpensesCalculation(input: UpdateExpensesCalculationInput!, condition: ModelExpensesCalculationConditionInput): ExpensesCalculation
  deleteExpensesCalculation(input: DeleteExpensesCalculationInput!, condition: ModelExpensesCalculationConditionInput): ExpensesCalculation
  createTask(input: CreateTaskInput!, condition: ModelTaskConditionInput): Task
  updateTask(input: UpdateTaskInput!, condition: ModelTaskConditionInput): Task
  deleteTask(input: DeleteTaskInput!, condition: ModelTaskConditionInput): Task
  createCalendarEvent(input: CreateCalendarEventInput!, condition: ModelCalendarEventConditionInput): CalendarEvent
  updateCalendarEvent(input: UpdateCalendarEventInput!, condition: ModelCalendarEventConditionInput): CalendarEvent
  deleteCalendarEvent(input: DeleteCalendarEventInput!, condition: ModelCalendarEventConditionInput): CalendarEvent
}

input ModelUserConditionInput {
  username: ModelStringInput
  email: ModelStringInput
  name: ModelStringInput
  phone: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  pictureURL: ModelStringInput
  lastPageLoad: ModelStringInput
  heartbeat: ModelStringInput
  and: [ModelUserConditionInput]
  or: [ModelUserConditionInput]
  not: ModelUserConditionInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Subscription {
  onCreateUser: User @aws_subscribe(mutations: ["createUser"])
  onUpdateUser: User @aws_subscribe(mutations: ["updateUser"])
  onDeleteUser: User @aws_subscribe(mutations: ["deleteUser"])
  onCreateUserGroups: UserGroups @aws_subscribe(mutations: ["createUserGroups"])
  onUpdateUserGroups: UserGroups @aws_subscribe(mutations: ["updateUserGroups"])
  onDeleteUserGroups: UserGroups @aws_subscribe(mutations: ["deleteUserGroups"])
  onCreateGroup: Group @aws_subscribe(mutations: ["createGroup"])
  onUpdateGroup: Group @aws_subscribe(mutations: ["updateGroup"])
  onDeleteGroup: Group @aws_subscribe(mutations: ["deleteGroup"])
  onCreateReceipt: Receipt @aws_subscribe(mutations: ["createReceipt"])
  onUpdateReceipt: Receipt @aws_subscribe(mutations: ["updateReceipt"])
  onDeleteReceipt: Receipt @aws_subscribe(mutations: ["deleteReceipt"])
  onCreateExpensesCalculation: ExpensesCalculation @aws_subscribe(mutations: ["createExpensesCalculation"])
  onUpdateExpensesCalculation: ExpensesCalculation @aws_subscribe(mutations: ["updateExpensesCalculation"])
  onDeleteExpensesCalculation: ExpensesCalculation @aws_subscribe(mutations: ["deleteExpensesCalculation"])
  onCreateTask: Task @aws_subscribe(mutations: ["createTask"])
  onUpdateTask: Task @aws_subscribe(mutations: ["updateTask"])
  onDeleteTask: Task @aws_subscribe(mutations: ["deleteTask"])
  onCreateCalendarEvent: CalendarEvent @aws_subscribe(mutations: ["createCalendarEvent"])
  onUpdateCalendarEvent: CalendarEvent @aws_subscribe(mutations: ["updateCalendarEvent"])
  onDeleteCalendarEvent: CalendarEvent @aws_subscribe(mutations: ["deleteCalendarEvent"])
}

input ModelUserGroupsFilterInput {
  id: ModelIDInput
  and: [ModelUserGroupsFilterInput]
  or: [ModelUserGroupsFilterInput]
  not: ModelUserGroupsFilterInput
}

input CreateUserGroupsInput {
  id: ID
  userGroupsUserId: ID
  userGroupsGroupId: ID
}

input UpdateUserGroupsInput {
  id: ID!
  userGroupsUserId: ID
  userGroupsGroupId: ID
}

input DeleteUserGroupsInput {
  id: ID
}

input ModelUserGroupsConditionInput {
  and: [ModelUserGroupsConditionInput]
  or: [ModelUserGroupsConditionInput]
  not: ModelUserGroupsConditionInput
}

type ModelGroupConnection {
  items: [Group]
  nextToken: String
}

input ModelGroupFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  type: ModelStringInput
  description: ModelStringInput
  lastReceiptCalculationTime: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  pictureURL: ModelStringInput
  totalBudget: ModelStringInput
  remainingBalance: ModelStringInput
  and: [ModelGroupFilterInput]
  or: [ModelGroupFilterInput]
  not: ModelGroupFilterInput
}

input CreateGroupInput {
  id: ID
  name: String
  type: String
  description: String
  lastReceiptCalculationTime: String
  createdAt: String
  updatedAt: String
  pictureURL: String
  totalBudget: String
  remainingBalance: String
  groupOwnerId: ID
}

input UpdateGroupInput {
  id: ID!
  name: String
  type: String
  description: String
  lastReceiptCalculationTime: String
  createdAt: String
  updatedAt: String
  pictureURL: String
  totalBudget: String
  remainingBalance: String
  groupOwnerId: ID
}

input DeleteGroupInput {
  id: ID
}

input ModelGroupConditionInput {
  name: ModelStringInput
  type: ModelStringInput
  description: ModelStringInput
  lastReceiptCalculationTime: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  pictureURL: ModelStringInput
  totalBudget: ModelStringInput
  remainingBalance: ModelStringInput
  and: [ModelGroupConditionInput]
  or: [ModelGroupConditionInput]
  not: ModelGroupConditionInput
}

type ModelReceiptConnection {
  items: [Receipt]
  nextToken: String
}

input ModelReceiptFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  description: ModelStringInput
  memberSplit: ModelStringInput
  totalAmount: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  receiptImageUrl: ModelStringInput
  approvalStatus: ModelStringInput
  approvedDate: ModelStringInput
  approverList: ModelStringInput
  and: [ModelReceiptFilterInput]
  or: [ModelReceiptFilterInput]
  not: ModelReceiptFilterInput
}

input CreateReceiptInput {
  id: ID
  name: String
  description: String
  memberSplit: String
  totalAmount: String
  createdAt: String
  updatedAt: String
  receiptImageUrl: String
  approvalStatus: String
  approvedDate: String
  approverList: [String]
  receiptOwnerId: ID
  receiptGroupId: ID
}

input UpdateReceiptInput {
  id: ID!
  name: String
  description: String
  memberSplit: String
  totalAmount: String
  createdAt: String
  updatedAt: String
  receiptImageUrl: String
  approvalStatus: String
  approvedDate: String
  approverList: [String]
  receiptOwnerId: ID
  receiptGroupId: ID
}

input DeleteReceiptInput {
  id: ID
}

input ModelReceiptConditionInput {
  name: ModelStringInput
  description: ModelStringInput
  memberSplit: ModelStringInput
  totalAmount: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  receiptImageUrl: ModelStringInput
  approvalStatus: ModelStringInput
  approvedDate: ModelStringInput
  approverList: ModelStringInput
  and: [ModelReceiptConditionInput]
  or: [ModelReceiptConditionInput]
  not: ModelReceiptConditionInput
}

type ModelExpensesCalculationConnection {
  items: [ExpensesCalculation]
  nextToken: String
}

input ModelExpensesCalculationFilterInput {
  id: ModelIDInput
  cycleEndDate: ModelStringInput
  totalExpenditure: ModelStringInput
  expenseDivision: ModelStringInput
  totalOwed: ModelStringInput
  and: [ModelExpensesCalculationFilterInput]
  or: [ModelExpensesCalculationFilterInput]
  not: ModelExpensesCalculationFilterInput
}

input CreateExpensesCalculationInput {
  id: ID
  cycleEndDate: String
  totalExpenditure: String
  expenseDivision: String
  totalOwed: String
  expensesCalculationGroupId: ID
}

input UpdateExpensesCalculationInput {
  id: ID!
  cycleEndDate: String
  totalExpenditure: String
  expenseDivision: String
  totalOwed: String
  expensesCalculationGroupId: ID
}

input DeleteExpensesCalculationInput {
  id: ID
}

input ModelExpensesCalculationConditionInput {
  cycleEndDate: ModelStringInput
  totalExpenditure: ModelStringInput
  expenseDivision: ModelStringInput
  totalOwed: ModelStringInput
  and: [ModelExpensesCalculationConditionInput]
  or: [ModelExpensesCalculationConditionInput]
  not: ModelExpensesCalculationConditionInput
}

type ModelTaskConnection {
  items: [Task]
  nextToken: String
}

input ModelTaskFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  description: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  dueDate: ModelStringInput
  status: ModelStringInput
  isImportant: ModelBooleanInput
  notifStatus: ModelStringInput
  and: [ModelTaskFilterInput]
  or: [ModelTaskFilterInput]
  not: ModelTaskFilterInput
}

input CreateTaskInput {
  id: ID
  name: String
  description: String
  createdAt: String
  updatedAt: String
  dueDate: String
  status: String
  isImportant: Boolean
  notifStatus: String
  taskOwnerId: ID
  taskAssignedToId: ID
  taskGroupId: ID
}

input UpdateTaskInput {
  id: ID!
  name: String
  description: String
  createdAt: String
  updatedAt: String
  dueDate: String
  status: String
  isImportant: Boolean
  notifStatus: String
  taskOwnerId: ID
  taskAssignedToId: ID
  taskGroupId: ID
}

input DeleteTaskInput {
  id: ID
}

input ModelTaskConditionInput {
  name: ModelStringInput
  description: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  dueDate: ModelStringInput
  status: ModelStringInput
  isImportant: ModelBooleanInput
  notifStatus: ModelStringInput
  and: [ModelTaskConditionInput]
  or: [ModelTaskConditionInput]
  not: ModelTaskConditionInput
}

type ModelCalendarEventConnection {
  items: [CalendarEvent]
  nextToken: String
}

input ModelCalendarEventFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  description: ModelStringInput
  location: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  startTimestamp: ModelStringInput
  endTimestamp: ModelStringInput
  status: ModelStringInput
  memberResponses: ModelStringInput
  and: [ModelCalendarEventFilterInput]
  or: [ModelCalendarEventFilterInput]
  not: ModelCalendarEventFilterInput
}

input CreateCalendarEventInput {
  id: ID
  name: String
  description: String
  location: String
  createdAt: String
  updatedAt: String
  startTimestamp: String
  endTimestamp: String
  status: String
  memberResponses: String
  calendarEventOwnerId: ID
  calendarEventGroupId: ID
}

input UpdateCalendarEventInput {
  id: ID!
  name: String
  description: String
  location: String
  createdAt: String
  updatedAt: String
  startTimestamp: String
  endTimestamp: String
  status: String
  memberResponses: String
  calendarEventOwnerId: ID
  calendarEventGroupId: ID
}

input DeleteCalendarEventInput {
  id: ID
}

input ModelCalendarEventConditionInput {
  name: ModelStringInput
  description: ModelStringInput
  location: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  startTimestamp: ModelStringInput
  endTimestamp: ModelStringInput
  status: ModelStringInput
  memberResponses: ModelStringInput
  and: [ModelCalendarEventConditionInput]
  or: [ModelCalendarEventConditionInput]
  not: ModelCalendarEventConditionInput
}

type ModelUserGroupsConnection {
  items: [UserGroups]
  nextToken: String
}
